{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "1538770223942052377"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location for all resources"
      }
    },
    "cosmosAccountName": {
      "type": "string",
      "metadata": {
        "description": "CosmosDB account name"
      }
    },
    "primaryRegion": {
      "type": "string",
      "metadata": {
        "description": "The primary region for the Cosmos DB account."
      }
    },
    "secondaryRegion": {
      "type": "string",
      "metadata": {
        "description": "The secondary region for the Cosmos DB account."
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB default consistency level"
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "metadata": {
        "description": "Max stale requests for BoundedStaleness."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "metadata": {
        "description": "Max lag time in seconds for BoundedStaleness."
      }
    },
    "systemManagedFailover": {
      "type": "bool",
      "metadata": {
        "description": "Enable system-managed failover for regions"
      }
    },
    "enableAnalyticalStorage": {
      "type": "bool",
      "metadata": {
        "description": "Enable analytical storage for Cosmos DB account."
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB SQL database name."
      }
    },
    "userContainerName": {
      "type": "string",
      "metadata": {
        "description": "Name for the user container."
      }
    },
    "fileContainerName": {
      "type": "string",
      "metadata": {
        "description": "Name for the file container."
      }
    },
    "throughput": {
      "type": "int",
      "metadata": {
        "description": "Container/database throughput (RU/s)."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual network name"
      }
    },
    "subnet1name": {
      "type": "string",
      "metadata": {
        "description": "Subnet 1 name"
      }
    },
    "subnet2name": {
      "type": "string",
      "metadata": {
        "description": "Subnet 2 name"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "VNet address prefix"
      }
    },
    "subnet1AddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Subnet 1 address prefix"
      }
    },
    "subnet2AddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Subnet 2 address prefix"
      }
    },
    "storageAccountName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Storage account name"
      }
    },
    "storageAccountSku": {
      "type": "string",
      "metadata": {
        "description": "Storage account SKU"
      }
    },
    "appServiceName": {
      "type": "string"
    },
    "appInsightName": {
      "type": "string",
      "metadata": {
        "description": "App Insight name."
      }
    },
    "environmentType": {
      "type": "string",
      "defaultValue": "nonprod",
      "allowedValues": [
        "nonprod",
        "prod"
      ],
      "metadata": {
        "description": "Specifies the environment type, which controls the SKU."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "networkDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "subnet1name": {
            "value": "[parameters('subnet1name')]"
          },
          "subnet2name": {
            "value": "[parameters('subnet2name')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "subnet1AddressPrefix": {
            "value": "[parameters('subnet1AddressPrefix')]"
          },
          "subnet2AddressPrefix": {
            "value": "[parameters('subnet2AddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7978429445256326348"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for Virtual Network."
              }
            },
            "vnetName": {
              "type": "string",
              "defaultValue": "insightVaultVnet",
              "metadata": {
                "description": "Name for Virtual Network."
              }
            },
            "subnet1name": {
              "type": "string",
              "defaultValue": "Subnet-1",
              "metadata": {
                "description": "Name for subnet-1"
              }
            },
            "subnet2name": {
              "type": "string",
              "defaultValue": "Subnet-2",
              "metadata": {
                "description": "Name for subnet-2"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/16",
              "metadata": {
                "description": "Address prefix for the virtual network."
              }
            },
            "subnet1AddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/24",
              "metadata": {
                "description": "Address prefix for Subnet 1."
              }
            },
            "subnet2AddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.1.0/24",
              "metadata": {
                "description": "Address prefix for Subnet 2."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-09-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[parameters('subnet1name')]",
                    "properties": {
                      "addressPrefix": "[parameters('subnet1AddressPrefix')]"
                    }
                  },
                  {
                    "name": "[parameters('subnet2name')]",
                    "properties": {
                      "addressPrefix": "[parameters('subnet2AddressPrefix')]"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[parameters('vnetName')]"
            },
            "subnet1Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-09-01').subnets[0].id]"
            },
            "subnet2Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-09-01').subnets[1].id]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "AppInsightsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appInsightName": {
            "value": "[parameters('appInsightName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "12370989646376037469"
            }
          },
          "parameters": {
            "appInsightName": {
              "type": "string",
              "defaultValue": "insightVaultAI",
              "metadata": {
                "description": "App Insight Name"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "App service plan location"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web"
              }
            }
          ],
          "outputs": {
            "appInsightsKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightName')), '2020-02-02').InstrumentationKey]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appServiceDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appServiceAppName": {
            "value": "[parameters('appServiceName')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "appInsightsKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'AppInsightsDeployment'), '2022-09-01').outputs.appInsightsKey.value]"
          },
          "cosmosDbAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment'), '2022-09-01').outputs.cosmosDbAccountId.value]"
          },
          "cosmosDbAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment'), '2022-09-01').outputs.cosmosDbAccountName.value]"
          },
          "cosmosDbEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment'), '2022-09-01').outputs.cosmosDbEndpoint.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageDeployment'), '2022-09-01').outputs.storageAccountName.value]"
          },
          "networkName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkDeployment'), '2022-09-01').outputs.vnetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "12406865813204121890"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The Azure region to deploy resources in."
              }
            },
            "appServiceAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service application."
              }
            },
            "environmentType": {
              "type": "string",
              "defaultValue": "nonprod",
              "allowedValues": [
                "nonprod",
                "prod"
              ],
              "metadata": {
                "description": "Specifies the environment type, which controls the SKU."
              }
            },
            "appInsightsKey": {
              "type": "string",
              "metadata": {
                "description": "Instrumentation Key for Application Insights."
              }
            },
            "cosmosDbAccountName": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB Account Name"
              }
            },
            "cosmosDbAccountId": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB Account ID"
              }
            },
            "cosmosDbEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB Account Endpoint"
              }
            },
            "storageAccountName": {
              "type": "string"
            },
            "networkName": {
              "type": "string"
            }
          },
          "variables": {
            "appServicePlanName": "insightVaultASP",
            "appServicePlanSkuName": "[if(equals(parameters('environmentType'), 'prod'), 'P1v3', 'F1')]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-04-01",
              "name": "[variables('appServicePlanName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('appServicePlanSkuName')]",
                "tier": "[if(equals(parameters('environmentType'), 'prod'), 'ElasticPremium', 'Dynamic')]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('appServiceAppName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "httpsOnly": true,
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[parameters('appInsightsKey')]"
                    },
                    {
                      "name": "COSMOS_DB_ACCOUNT",
                      "value": "[parameters('cosmosDbAccountName')]"
                    },
                    {
                      "name": "COSMOS_DB_KEY",
                      "value": "[listKeys(parameters('cosmosDbAccountId'), '2021-04-15').primaryMasterKey]"
                    },
                    {
                      "name": "COSMOS_DB_URI",
                      "value": "[parameters('cosmosDbEndpoint')]"
                    },
                    {
                      "name": "STORAGE_ACCOUNT_NAME",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "NETWORK_NAME",
                      "value": "[parameters('networkName')]"
                    }
                  ]
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
              ]
            }
          ],
          "outputs": {
            "appServiceAppHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAppName')), '2024-04-01').defaultHostName]"
            },
            "appServiceAppResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('appServiceAppName'))]"
            },
            "appServicePlanResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
            },
            "appServicePrincipalID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAppName')), '2024-04-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'AppInsightsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'networkDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storageDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storageDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountSku": {
            "value": "[parameters('storageAccountSku')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "2771231245126498440"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 24,
              "metadata": {
                "description": "Provide a name for the storage account. Use only lowercase letters and numbers. The name must be unique across Azure."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for the storage account."
              }
            },
            "storageAccountSku": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The SKU of the storage account (e.g., Standard_LRS, Standard_GRS)."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": true,
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
              }
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosDbDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[parameters('cosmosAccountName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "primaryRegion": {
            "value": "[parameters('primaryRegion')]"
          },
          "secondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "defaultConsistencyLevel": {
            "value": "[parameters('defaultConsistencyLevel')]"
          },
          "maxStalenessPrefix": {
            "value": "[parameters('maxStalenessPrefix')]"
          },
          "maxIntervalInSeconds": {
            "value": "[parameters('maxIntervalInSeconds')]"
          },
          "systemManagedFailover": {
            "value": "[parameters('systemManagedFailover')]"
          },
          "enableAnalyticalStorage": {
            "value": "[parameters('enableAnalyticalStorage')]"
          },
          "databaseName": {
            "value": "[parameters('databaseName')]"
          },
          "userContainerName": {
            "value": "[parameters('userContainerName')]"
          },
          "fileContainerName": {
            "value": "[parameters('fileContainerName')]"
          },
          "throughput": {
            "value": "[parameters('throughput')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "4627652962017264359"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "CosmosDB account name"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for the Azure Cosmos DB account."
              }
            },
            "primaryRegion": {
              "type": "string",
              "metadata": {
                "description": "The primary region for the Azure Cosmos DB account."
              }
            },
            "secondaryRegion": {
              "type": "string",
              "metadata": {
                "description": "The secondary region for the Azure Cosmos DB account."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ],
              "metadata": {
                "description": "The default consistency level of the Cosmos DB account."
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "minValue": 10,
              "maxValue": 2147483647,
              "metadata": {
                "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647."
              }
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "minValue": 5,
              "maxValue": 86400,
              "metadata": {
                "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400"
              }
            },
            "systemManagedFailover": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Enable system managed failover for regions"
              }
            },
            "enableAnalyticalStorage": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable analytical storage for the Cosmos DB account."
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "insightVaultDB",
              "metadata": {
                "description": "Name for the database."
              }
            },
            "userContainerName": {
              "type": "string",
              "defaultValue": "userContainer",
              "metadata": {
                "description": "Name for the user container."
              }
            },
            "fileContainerName": {
              "type": "string",
              "defaultValue": "fileContainer",
              "metadata": {
                "description": "Name for the file container."
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400,
              "minValue": 400,
              "maxValue": 1000000,
              "metadata": {
                "description": "The throughput for the containers (RU/s)."
              }
            }
          },
          "variables": {
            "consistencyPolicy": {
              "Eventual": {
                "defaultConsistencyLevel": "Eventual"
              },
              "ConsistentPrefix": {
                "defaultConsistencyLevel": "ConsistentPrefix"
              },
              "Session": {
                "defaultConsistencyLevel": "Session"
              },
              "BoundedStaleness": {
                "defaultConsistencyLevel": "BoundedStaleness",
                "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
              },
              "Strong": {
                "defaultConsistencyLevel": "Strong"
              }
            },
            "locations": [
              {
                "locationName": "[parameters('primaryRegion')]",
                "failoverPriority": 0,
                "isZoneRedundant": false
              },
              {
                "locationName": "[parameters('secondaryRegion')]",
                "failoverPriority": 1,
                "isZoneRedundant": false
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2025-04-15",
              "name": "[toLower(parameters('accountName'))]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
                "locations": "[variables('locations')]",
                "databaseAccountOfferType": "Standard",
                "enableAnalyticalStorage": "[parameters('enableAnalyticalStorage')]",
                "disableKeyBasedMetadataWriteAccess": true,
                "enableAutomaticFailover": "[parameters('systemManagedFailover')]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2025-04-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                },
                "options": {
                  "throughput": "[parameters('throughput')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2025-04-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), parameters('databaseName'), parameters('userContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('userContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/userid"
                    ]
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/myPathToNotIndex/*"
                      },
                      {
                        "path": "/_etag/?"
                      }
                    ],
                    "compositeIndexes": [
                      [
                        {
                          "path": "/name",
                          "order": "ascending"
                        },
                        {
                          "path": "/email",
                          "order": "descending"
                        }
                      ]
                    ],
                    "spatialIndexes": [
                      {
                        "path": "/location/*",
                        "types": [
                          "Point",
                          "Polygon",
                          "MultiPolygon",
                          "LineString"
                        ]
                      }
                    ]
                  },
                  "defaultTtl": 86400,
                  "uniqueKeyPolicy": {
                    "uniqueKeys": [
                      {
                        "paths": [
                          "/userid"
                        ]
                      }
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2025-04-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), parameters('databaseName'), parameters('fileContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('fileContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/fileid"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/myPathToNotIndex/*"
                      },
                      {
                        "path": "/_etag/?"
                      }
                    ],
                    "compositeIndexes": [
                      [
                        {
                          "path": "/dateCreated",
                          "order": "ascending"
                        },
                        {
                          "path": "/filename",
                          "order": "descending"
                        }
                      ]
                    ],
                    "spatialIndexes": [
                      {
                        "path": "/location/*",
                        "types": [
                          "Point",
                          "Polygon",
                          "MultiPolygon",
                          "LineString"
                        ]
                      }
                    ]
                  },
                  "defaultTtl": 86400,
                  "uniqueKeyPolicy": {
                    "uniqueKeys": [
                      {
                        "paths": [
                          "/fileid"
                        ]
                      }
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosDbAccountName": {
              "type": "string",
              "value": "[toLower(parameters('accountName'))]"
            },
            "cosmosDbAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
            },
            "cosmosDbDatabaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "cosmosDbDatabaseId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
            },
            "cosmosDbEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), '2025-04-15').documentEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "assignRoles",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServiceAppName": {
            "value": "[parameters('appServiceName')]"
          },
          "appServicePrincipalID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appServiceDeployment'), '2022-09-01').outputs.appServicePrincipalID.value]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageDeployment'), '2022-09-01').outputs.storageAccountId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "12479554522157692230"
            }
          },
          "parameters": {
            "appServiceAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service (used only for deterministic GUID generation)."
              }
            },
            "appServicePrincipalID": {
              "type": "string",
              "metadata": {
                "description": "App Service principal (object) ID"
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Storage Account"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(resourceGroup().id, parameters('appServiceAppName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                "principalId": "[parameters('appServicePrincipalID')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountId'), '/')))]",
              "name": "[guid(resourceGroup().id, parameters('appServiceAppName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('appServicePrincipalID')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appServiceDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storageDeployment')]"
      ]
    }
  ],
  "outputs": {
    "cosmosDbName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment'), '2022-09-01').outputs.cosmosDbAccountName.value]"
    },
    "cosmosDbId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosDbDeployment'), '2022-09-01').outputs.cosmosDbDatabaseId.value]"
    },
    "storageId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageDeployment'), '2022-09-01').outputs.storageAccountId.value]"
    },
    "vnetId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkDeployment'), '2022-09-01').outputs.vnetId.value]"
    },
    "subnet1Id": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkDeployment'), '2022-09-01').outputs.subnet1Id.value]"
    },
    "subnet2Id": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkDeployment'), '2022-09-01').outputs.subnet2Id.value]"
    }
  }
}